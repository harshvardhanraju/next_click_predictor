# Google Cloud Run Optimized Dockerfile
# Multi-stage build for minimal image size and fast cold starts

# Build stage - use slim Python image
FROM python:3.11-slim as builder

# Set environment variables for build optimization
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies for ML libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    tesseract-ocr \
    tesseract-ocr-eng \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install Python dependencies
COPY requirements.optimized.txt .
RUN pip install --no-cache-dir -r requirements.optimized.txt

# Production stage - use distroless for security and size
FROM python:3.11-slim as production

# Install runtime dependencies for ML libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender1 \
    libgomp1 \
    tesseract-ocr \
    tesseract-ocr-eng \
    && rm -rf /var/lib/apt/lists/*

# Set Cloud Run optimized environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PORT=8080 \
    WORKERS=1 \
    WORKER_TIMEOUT=120 \
    WORKER_CLASS=uvicorn.workers.UvicornWorker \
    MAX_WORKER_CONNECTIONS=1000 \
    MATPLOTLIB_CACHE_DIR=/tmp/matplotlib \
    MPLCONFIGDIR=/tmp/matplotlib

# Create non-root user for security
RUN groupadd --gid 65532 cloudrun && \
    useradd --uid 65532 --gid cloudrun --shell /bin/bash --create-home cloudrun

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code
COPY cloudrun_app_optimized.py .
COPY warm_up_models.py .
COPY src/ ./src/

# Change ownership to non-root user  
RUN chown -R cloudrun:cloudrun /app
USER cloudrun

# Pre-download models and warm up ML components during build
# This prevents cold start delays and timeout issues
RUN echo "ðŸ”¥ Pre-warming ML models during Docker build..." && \
    python warm_up_models.py && \
    echo "âœ… Model warm-up completed successfully!"

# Expose port for Cloud Run
EXPOSE 8080

# Health check for Cloud Run
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8080/health')" || exit 1

# Cloud Run optimized startup command with increased timeout
CMD exec gunicorn --bind :$PORT --workers $WORKERS --worker-class $WORKER_CLASS --worker-connections $MAX_WORKER_CONNECTIONS --timeout $WORKER_TIMEOUT --access-logfile - --error-logfile - --preload cloudrun_app_optimized:app